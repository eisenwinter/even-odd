// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NumberResponse struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberResponse) Reset()         { *m = NumberResponse{} }
func (m *NumberResponse) String() string { return proto.CompactTextString(m) }
func (*NumberResponse) ProtoMessage()    {}
func (*NumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *NumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberResponse.Unmarshal(m, b)
}
func (m *NumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberResponse.Marshal(b, m, deterministic)
}
func (m *NumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberResponse.Merge(m, src)
}
func (m *NumberResponse) XXX_Size() int {
	return xxx_messageInfo_NumberResponse.Size(m)
}
func (m *NumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NumberResponse proto.InternalMessageInfo

func (m *NumberResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*NumberResponse)(nil), "NumberResponse")
}

func init() {
	proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626)
}

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x92, 0x4a,
	0x6a, 0x5c, 0x7c, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5,
	0xa9, 0x42, 0x22, 0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc,
	0x41, 0x10, 0x8e, 0x51, 0x21, 0x17, 0x9f, 0x6b, 0x59, 0x6a, 0x9e, 0x7f, 0x4a, 0x4a, 0x30, 0xc4,
	0x70, 0x21, 0x7d, 0x2e, 0x16, 0x90, 0x88, 0x90, 0x98, 0x1e, 0xc4, 0x7c, 0x3d, 0x98, 0xf9, 0x7a,
	0xae, 0x20, 0xf3, 0xa5, 0xf8, 0xf5, 0xd0, 0x0c, 0xd6, 0xe3, 0x62, 0xf6, 0x4f, 0x49, 0x21, 0x5a,
	0x7d, 0x12, 0x1b, 0x58, 0x81, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xde, 0x6c, 0xd1, 0xf8, 0xcf,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EvenOddServiceClient is the client API for EvenOddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvenOddServiceClient interface {
	Even(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumberResponse, error)
	Odd(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumberResponse, error)
}

type evenOddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvenOddServiceClient(cc grpc.ClientConnInterface) EvenOddServiceClient {
	return &evenOddServiceClient{cc}
}

func (c *evenOddServiceClient) Even(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/EvenOddService/Even", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evenOddServiceClient) Odd(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/EvenOddService/Odd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvenOddServiceServer is the server API for EvenOddService service.
type EvenOddServiceServer interface {
	Even(context.Context, *empty.Empty) (*NumberResponse, error)
	Odd(context.Context, *empty.Empty) (*NumberResponse, error)
}

// UnimplementedEvenOddServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEvenOddServiceServer struct {
}

func (*UnimplementedEvenOddServiceServer) Even(ctx context.Context, req *empty.Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Even not implemented")
}
func (*UnimplementedEvenOddServiceServer) Odd(ctx context.Context, req *empty.Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Odd not implemented")
}

func RegisterEvenOddServiceServer(s *grpc.Server, srv EvenOddServiceServer) {
	s.RegisterService(&_EvenOddService_serviceDesc, srv)
}

func _EvenOddService_Even_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenOddServiceServer).Even(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EvenOddService/Even",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenOddServiceServer).Even(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvenOddService_Odd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenOddServiceServer).Odd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EvenOddService/Odd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenOddServiceServer).Odd(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvenOddService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EvenOddService",
	HandlerType: (*EvenOddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Even",
			Handler:    _EvenOddService_Even_Handler,
		},
		{
			MethodName: "Odd",
			Handler:    _EvenOddService_Odd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
